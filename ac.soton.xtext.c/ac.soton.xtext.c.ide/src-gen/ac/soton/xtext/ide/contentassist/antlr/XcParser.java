/*
 * generated by Xtext 2.25.0
 */
package ac.soton.xtext.ide.contentassist.antlr;

import ac.soton.xtext.ide.contentassist.antlr.internal.InternalXcParser;
import ac.soton.xtext.services.XcGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class XcParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XcGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XcGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getContextAccess().getAlternatives_3(), "rule__Context__Alternatives_3");
			builder.put(grammarAccess.getInitialisationAccess().getAlternatives_3(), "rule__Initialisation__Alternatives_3");
			builder.put(grammarAccess.getMainAccess().getAlternatives_3(), "rule__Main__Alternatives_3");
			builder.put(grammarAccess.getCSubProgramAccess().getAlternatives(), "rule__CSubProgram__Alternatives");
			builder.put(grammarAccess.getCFunctionAccess().getAlternatives_6(), "rule__CFunction__Alternatives_6");
			builder.put(grammarAccess.getCProcedureAccess().getAlternatives_5(), "rule__CProcedure__Alternatives_5");
			builder.put(grammarAccess.getCVariableAccess().getAlternatives(), "rule__CVariable__Alternatives");
			builder.put(grammarAccess.getCArrayVariableAccess().getAlternatives(), "rule__CArrayVariable__Alternatives");
			builder.put(grammarAccess.getCExpressionAccess().getAlternatives(), "rule__CExpression__Alternatives");
			builder.put(grammarAccess.getCExpressionHelperAccess().getAlternatives(), "rule__CExpressionHelper__Alternatives");
			builder.put(grammarAccess.getFormulaAccess().getAlternatives(), "rule__Formula__Alternatives");
			builder.put(grammarAccess.getMathematicalFormulaAccess().getAlternatives(), "rule__MathematicalFormula__Alternatives");
			builder.put(grammarAccess.getIntegerFormulaAccess().getAlternatives(), "rule__IntegerFormula__Alternatives");
			builder.put(grammarAccess.getCTypeAccess().getAlternatives(), "rule__CType__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getCBooleanAccess().getAlternatives(), "rule__CBoolean__Alternatives");
			builder.put(grammarAccess.getCSourceFileAccess().getGroup(), "rule__CSourceFile__Group__0");
			builder.put(grammarAccess.getCIncludeDirectiveAccess().getGroup(), "rule__CIncludeDirective__Group__0");
			builder.put(grammarAccess.getContextAccess().getGroup(), "rule__Context__Group__0");
			builder.put(grammarAccess.getContextAccess().getGroup_1(), "rule__Context__Group_1__0");
			builder.put(grammarAccess.getInitialisationAccess().getGroup(), "rule__Initialisation__Group__0");
			builder.put(grammarAccess.getInitialisationAccess().getGroup_1(), "rule__Initialisation__Group_1__0");
			builder.put(grammarAccess.getMainAccess().getGroup(), "rule__Main__Group__0");
			builder.put(grammarAccess.getMainAccess().getGroup_1(), "rule__Main__Group_1__0");
			builder.put(grammarAccess.getCFunctionAccess().getGroup(), "rule__CFunction__Group__0");
			builder.put(grammarAccess.getCFunctionAccess().getGroup_3(), "rule__CFunction__Group_3__0");
			builder.put(grammarAccess.getCFunctionAccess().getGroup_3_2(), "rule__CFunction__Group_3_2__0");
			builder.put(grammarAccess.getCProcedureAccess().getGroup(), "rule__CProcedure__Group__0");
			builder.put(grammarAccess.getCProcedureAccess().getGroup_2(), "rule__CProcedure__Group_2__0");
			builder.put(grammarAccess.getCProcedureAccess().getGroup_2_2(), "rule__CProcedure__Group_2_2__0");
			builder.put(grammarAccess.getCPreConditionAccess().getGroup(), "rule__CPreCondition__Group__0");
			builder.put(grammarAccess.getCParameterAccess().getGroup(), "rule__CParameter__Group__0");
			builder.put(grammarAccess.getCVariable_ImplAccess().getGroup(), "rule__CVariable_Impl__Group__0");
			builder.put(grammarAccess.getCVariable_ImplAccess().getGroup_4(), "rule__CVariable_Impl__Group_4__0");
			builder.put(grammarAccess.getCArrayVariableAccess().getGroup_0(), "rule__CArrayVariable__Group_0__0");
			builder.put(grammarAccess.getCArrayVariableAccess().getGroup_1(), "rule__CArrayVariable__Group_1__0");
			builder.put(grammarAccess.getCArrayVariableAccess().getGroup_2(), "rule__CArrayVariable__Group_2__0");
			builder.put(grammarAccess.getCArrayVariableAccess().getGroup_3(), "rule__CArrayVariable__Group_3__0");
			builder.put(grammarAccess.getPreConditionAccess().getGroup(), "rule__PreCondition__Group__0");
			builder.put(grammarAccess.getForLoopAccess().getGroup(), "rule__ForLoop__Group__0");
			builder.put(grammarAccess.getArrayLenAccess().getGroup(), "rule__ArrayLen__Group__0");
			builder.put(grammarAccess.getFormulaAccess().getGroup_8(), "rule__Formula__Group_8__0");
			builder.put(grammarAccess.getIntegerFormulaAccess().getGroup_2(), "rule__IntegerFormula__Group_2__0");
			builder.put(grammarAccess.getCTypeAccess().getGroup_0(), "rule__CType__Group_0__0");
			builder.put(grammarAccess.getCTypeAccess().getGroup_1(), "rule__CType__Group_1__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getCIntAccess().getGroup(), "rule__CInt__Group__0");
			builder.put(grammarAccess.getCStructAccess().getGroup(), "rule__CStruct__Group__0");
			builder.put(grammarAccess.getCStructAccess().getGroup_5(), "rule__CStruct__Group_5__0");
			builder.put(grammarAccess.getCFieldAccess().getGroup(), "rule__CField__Group__0");
			builder.put(grammarAccess.getCEnumerationAccess().getGroup(), "rule__CEnumeration__Group__0");
			builder.put(grammarAccess.getCEnumerationAccess().getGroup_5(), "rule__CEnumeration__Group_5__0");
			builder.put(grammarAccess.getCEnumerationAccess().getGroup_5_1(), "rule__CEnumeration__Group_5_1__0");
			builder.put(grammarAccess.getCEnumPropertiesAccess().getGroup(), "rule__CEnumProperties__Group__0");
			builder.put(grammarAccess.getCPointerAccess().getGroup(), "rule__CPointer__Group__0");
			builder.put(grammarAccess.getCSourceFileAccess().getSubProgramsAssignment_1(), "rule__CSourceFile__SubProgramsAssignment_1");
			builder.put(grammarAccess.getCSourceFileAccess().getSubProgramsAssignment_2(), "rule__CSourceFile__SubProgramsAssignment_2");
			builder.put(grammarAccess.getCSourceFileAccess().getSubProgramsAssignment_3(), "rule__CSourceFile__SubProgramsAssignment_3");
			builder.put(grammarAccess.getCIncludeDirectiveAccess().getNameAssignment_3(), "rule__CIncludeDirective__NameAssignment_3");
			builder.put(grammarAccess.getContextAccess().getNameAssignment_0(), "rule__Context__NameAssignment_0");
			builder.put(grammarAccess.getContextAccess().getLocalVariablesAssignment_3_0(), "rule__Context__LocalVariablesAssignment_3_0");
			builder.put(grammarAccess.getContextAccess().getBodyAssignment_3_1(), "rule__Context__BodyAssignment_3_1");
			builder.put(grammarAccess.getInitialisationAccess().getNameAssignment_0(), "rule__Initialisation__NameAssignment_0");
			builder.put(grammarAccess.getInitialisationAccess().getLocalVariablesAssignment_3_0(), "rule__Initialisation__LocalVariablesAssignment_3_0");
			builder.put(grammarAccess.getInitialisationAccess().getBodyAssignment_3_1(), "rule__Initialisation__BodyAssignment_3_1");
			builder.put(grammarAccess.getMainAccess().getNameAssignment_0(), "rule__Main__NameAssignment_0");
			builder.put(grammarAccess.getMainAccess().getLocalVariablesAssignment_3_0(), "rule__Main__LocalVariablesAssignment_3_0");
			builder.put(grammarAccess.getMainAccess().getBodyAssignment_3_1(), "rule__Main__BodyAssignment_3_1");
			builder.put(grammarAccess.getCFunctionAccess().getReturnTypeAssignment_1(), "rule__CFunction__ReturnTypeAssignment_1");
			builder.put(grammarAccess.getCFunctionAccess().getNameAssignment_2(), "rule__CFunction__NameAssignment_2");
			builder.put(grammarAccess.getCFunctionAccess().getParametersAssignment_3_1(), "rule__CFunction__ParametersAssignment_3_1");
			builder.put(grammarAccess.getCFunctionAccess().getParametersAssignment_3_2_1(), "rule__CFunction__ParametersAssignment_3_2_1");
			builder.put(grammarAccess.getCFunctionAccess().getPreconditionsAssignment_5(), "rule__CFunction__PreconditionsAssignment_5");
			builder.put(grammarAccess.getCFunctionAccess().getLocalVariablesAssignment_6_0(), "rule__CFunction__LocalVariablesAssignment_6_0");
			builder.put(grammarAccess.getCFunctionAccess().getBodyAssignment_6_1(), "rule__CFunction__BodyAssignment_6_1");
			builder.put(grammarAccess.getCFunctionAccess().getReturnStatementAssignment_8(), "rule__CFunction__ReturnStatementAssignment_8");
			builder.put(grammarAccess.getCFunctionAccess().getEndnameAssignment_10(), "rule__CFunction__EndnameAssignment_10");
			builder.put(grammarAccess.getCProcedureAccess().getNameAssignment_1(), "rule__CProcedure__NameAssignment_1");
			builder.put(grammarAccess.getCProcedureAccess().getParametersAssignment_2_1(), "rule__CProcedure__ParametersAssignment_2_1");
			builder.put(grammarAccess.getCProcedureAccess().getParametersAssignment_2_2_1(), "rule__CProcedure__ParametersAssignment_2_2_1");
			builder.put(grammarAccess.getCProcedureAccess().getPreconditionsAssignment_4(), "rule__CProcedure__PreconditionsAssignment_4");
			builder.put(grammarAccess.getCProcedureAccess().getLocalVariablesAssignment_5_0(), "rule__CProcedure__LocalVariablesAssignment_5_0");
			builder.put(grammarAccess.getCProcedureAccess().getBodyAssignment_5_1(), "rule__CProcedure__BodyAssignment_5_1");
			builder.put(grammarAccess.getCPreConditionAccess().getExpressionAssignment_5(), "rule__CPreCondition__ExpressionAssignment_5");
			builder.put(grammarAccess.getCParameterAccess().getTypeAssignment_1(), "rule__CParameter__TypeAssignment_1");
			builder.put(grammarAccess.getCParameterAccess().getNameAssignment_2(), "rule__CParameter__NameAssignment_2");
			builder.put(grammarAccess.getCVariable_ImplAccess().getIsConstantAssignment_1(), "rule__CVariable_Impl__IsConstantAssignment_1");
			builder.put(grammarAccess.getCVariable_ImplAccess().getTypeAssignment_2(), "rule__CVariable_Impl__TypeAssignment_2");
			builder.put(grammarAccess.getCVariable_ImplAccess().getNameAssignment_3(), "rule__CVariable_Impl__NameAssignment_3");
			builder.put(grammarAccess.getCVariable_ImplAccess().getValueAssignment_4_1(), "rule__CVariable_Impl__ValueAssignment_4_1");
			builder.put(grammarAccess.getCArrayVariableAccess().getTypeAssignment_0_1(), "rule__CArrayVariable__TypeAssignment_0_1");
			builder.put(grammarAccess.getCArrayVariableAccess().getNameAssignment_0_3(), "rule__CArrayVariable__NameAssignment_0_3");
			builder.put(grammarAccess.getCArrayVariableAccess().getTypeAssignment_1_0(), "rule__CArrayVariable__TypeAssignment_1_0");
			builder.put(grammarAccess.getCArrayVariableAccess().getNameAssignment_1_1(), "rule__CArrayVariable__NameAssignment_1_1");
			builder.put(grammarAccess.getCArrayVariableAccess().getValueAssignment_1_6(), "rule__CArrayVariable__ValueAssignment_1_6");
			builder.put(grammarAccess.getCArrayVariableAccess().getTypeAssignment_2_0(), "rule__CArrayVariable__TypeAssignment_2_0");
			builder.put(grammarAccess.getCArrayVariableAccess().getNameAssignment_2_2(), "rule__CArrayVariable__NameAssignment_2_2");
			builder.put(grammarAccess.getCArrayVariableAccess().getSizeAssignment_2_6(), "rule__CArrayVariable__SizeAssignment_2_6");
			builder.put(grammarAccess.getCArrayVariableAccess().getTypeAssignment_3_0(), "rule__CArrayVariable__TypeAssignment_3_0");
			builder.put(grammarAccess.getCArrayVariableAccess().getNameAssignment_3_2(), "rule__CArrayVariable__NameAssignment_3_2");
			builder.put(grammarAccess.getCExpressionAccess().getExpressionAssignment_0(), "rule__CExpression__ExpressionAssignment_0");
			builder.put(grammarAccess.getCExpressionAccess().getExpressionAssignment_1(), "rule__CExpression__ExpressionAssignment_1");
			builder.put(grammarAccess.getCStructAccess().getNameAssignment_3(), "rule__CStruct__NameAssignment_3");
			builder.put(grammarAccess.getCStructAccess().getFieldsAssignment_5_0(), "rule__CStruct__FieldsAssignment_5_0");
			builder.put(grammarAccess.getCStructAccess().getTypeAssignment_7(), "rule__CStruct__TypeAssignment_7");
			builder.put(grammarAccess.getCFieldAccess().getNameAssignment_2(), "rule__CField__NameAssignment_2");
			builder.put(grammarAccess.getCEnumerationAccess().getNameAssignment_3(), "rule__CEnumeration__NameAssignment_3");
			builder.put(grammarAccess.getCEnumerationAccess().getEnumPropertiesAssignment_5_0(), "rule__CEnumeration__EnumPropertiesAssignment_5_0");
			builder.put(grammarAccess.getCEnumerationAccess().getEnumPropertiesAssignment_5_1_1(), "rule__CEnumeration__EnumPropertiesAssignment_5_1_1");
			builder.put(grammarAccess.getCEnumPropertiesAccess().getNameAssignment_1(), "rule__CEnumProperties__NameAssignment_1");
			builder.put(grammarAccess.getCPointerAccess().getNameAssignment_1(), "rule__CPointer__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XcGrammarAccess grammarAccess;

	@Override
	protected InternalXcParser createParser() {
		InternalXcParser result = new InternalXcParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XcGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XcGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

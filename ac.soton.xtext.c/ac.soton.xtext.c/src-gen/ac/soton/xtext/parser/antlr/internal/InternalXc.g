/*
 * generated by Xtext 2.25.0
 */
grammar InternalXc;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ac.soton.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ac.soton.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ac.soton.xtext.services.XcGrammarAccess;

}

@parser::members {

 	private XcGrammarAccess grammarAccess;

    public InternalXcParser(TokenStream input, XcGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CSourceFile";
   	}

   	@Override
   	protected XcGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCSourceFile
entryRuleCSourceFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCSourceFileRule()); }
	iv_ruleCSourceFile=ruleCSourceFile
	{ $current=$iv_ruleCSourceFile.current; }
	EOF;

// Rule CSourceFile
ruleCSourceFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCSourceFileAccess().getCSourceFileAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCSourceFileAccess().getSubProgramsContextParserRuleCall_1_0());
				}
				lv_subPrograms_1_0=ruleContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCSourceFileRule());
					}
					add(
						$current,
						"subPrograms",
						lv_subPrograms_1_0,
						"ac.soton.xtext.Xc.Context");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCSourceFileAccess().getSubProgramsInitialisationParserRuleCall_2_0());
				}
				lv_subPrograms_2_0=ruleInitialisation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCSourceFileRule());
					}
					add(
						$current,
						"subPrograms",
						lv_subPrograms_2_0,
						"ac.soton.xtext.Xc.Initialisation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCSourceFileAccess().getSubProgramsMainParserRuleCall_3_0());
				}
				lv_subPrograms_3_0=ruleMain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCSourceFileRule());
					}
					add(
						$current,
						"subPrograms",
						lv_subPrograms_3_0,
						"ac.soton.xtext.Xc.Main");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	iv_ruleContext=ruleContext
	{ $current=$iv_ruleContext.current; }
	EOF;

// Rule Context
ruleContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='context'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getContextAccess().getNameContextKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContextRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "context");
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getContextAccess().getLeftParenthesisKeyword_1_0());
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getContextAccess().getRightParenthesisKeyword_1_1());
			}
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getContextAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getContextAccess().getLocalVariablesCVariableParserRuleCall_3_0_0());
					}
					lv_localVariables_4_0=ruleCVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContextRule());
						}
						add(
							$current,
							"localVariables",
							lv_localVariables_4_0,
							"ac.soton.xtext.Xc.CVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getContextAccess().getBodyCExpressionParserRuleCall_3_1_0());
					}
					lv_body_5_0=ruleCExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContextRule());
						}
						add(
							$current,
							"body",
							lv_body_5_0,
							"ac.soton.xtext.Xc.CExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getContextAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInitialisation
entryRuleInitialisation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialisationRule()); }
	iv_ruleInitialisation=ruleInitialisation
	{ $current=$iv_ruleInitialisation.current; }
	EOF;

// Rule Initialisation
ruleInitialisation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='initialisation'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getInitialisationAccess().getNameInitialisationKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitialisationRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "initialisation");
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getInitialisationAccess().getLeftParenthesisKeyword_1_0());
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getInitialisationAccess().getRightParenthesisKeyword_1_1());
			}
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getInitialisationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInitialisationAccess().getLocalVariablesCVariableParserRuleCall_3_0_0());
					}
					lv_localVariables_4_0=ruleCVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInitialisationRule());
						}
						add(
							$current,
							"localVariables",
							lv_localVariables_4_0,
							"ac.soton.xtext.Xc.CVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInitialisationAccess().getBodyCExpressionParserRuleCall_3_1_0());
					}
					lv_body_5_0=ruleCExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInitialisationRule());
						}
						add(
							$current,
							"body",
							lv_body_5_0,
							"ac.soton.xtext.Xc.CExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getInitialisationAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainRule()); }
	iv_ruleMain=ruleMain
	{ $current=$iv_ruleMain.current; }
	EOF;

// Rule Main
ruleMain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='main'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMainAccess().getNameMainKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMainRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "main");
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getMainAccess().getLeftParenthesisKeyword_1_0());
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getMainAccess().getRightParenthesisKeyword_1_1());
			}
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getMainAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMainAccess().getLocalVariablesCVariableParserRuleCall_3_0_0());
					}
					lv_localVariables_4_0=ruleCVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMainRule());
						}
						add(
							$current,
							"localVariables",
							lv_localVariables_4_0,
							"ac.soton.xtext.Xc.CVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getMainAccess().getBodyCExpressionParserRuleCall_3_1_0());
					}
					lv_body_5_0=ruleCExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMainRule());
						}
						add(
							$current,
							"body",
							lv_body_5_0,
							"ac.soton.xtext.Xc.CExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getMainAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCFunction
entryRuleCFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCFunctionRule()); }
	iv_ruleCFunction=ruleCFunction
	{ $current=$iv_ruleCFunction.current; }
	EOF;

// Rule CFunction
ruleCFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCFunctionAccess().getCFunctionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCFunctionAccess().getReturnTypeEStringParserRuleCall_1_0());
				}
				lv_returnType_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCFunctionRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_1_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCFunctionAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCFunctionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getCFunctionAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCFunctionAccess().getParametersCParameterParserRuleCall_3_1_0());
					}
					lv_parameters_4_0=ruleCParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCFunctionRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_4_0,
							"ac.soton.xtext.Xc.CParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getCFunctionAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCFunctionAccess().getParametersCParameterParserRuleCall_3_2_1_0());
						}
						lv_parameters_6_0=ruleCParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCFunctionRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_6_0,
								"ac.soton.xtext.Xc.CParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getCFunctionAccess().getRightParenthesisKeyword_3_3());
			}
		)?
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getCFunctionAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCFunctionAccess().getPreconditionsCPreConditionParserRuleCall_5_0());
				}
				lv_preconditions_9_0=ruleCPreCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCFunctionRule());
					}
					add(
						$current,
						"preconditions",
						lv_preconditions_9_0,
						"ac.soton.xtext.Xc.CPreCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCFunctionAccess().getLocalVariablesCVariableParserRuleCall_6_0_0());
					}
					lv_localVariables_10_0=ruleCVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCFunctionRule());
						}
						add(
							$current,
							"localVariables",
							lv_localVariables_10_0,
							"ac.soton.xtext.Xc.CVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getCFunctionAccess().getBodyCExpressionParserRuleCall_6_1_0());
					}
					lv_body_11_0=ruleCExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCFunctionRule());
						}
						add(
							$current,
							"body",
							lv_body_11_0,
							"ac.soton.xtext.Xc.CExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_12='return'
		{
			newLeafNode(otherlv_12, grammarAccess.getCFunctionAccess().getReturnKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCFunctionAccess().getReturnStatementCExpressionParserRuleCall_8_0());
				}
				lv_returnStatement_13_0=ruleCExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCFunctionRule());
					}
					set(
						$current,
						"returnStatement",
						lv_returnStatement_13_0,
						"ac.soton.xtext.Xc.CExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getCFunctionAccess().getRightCurlyBracketKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCFunctionAccess().getEndnameEStringParserRuleCall_10_0());
				}
				lv_endname_15_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCFunctionRule());
					}
					set(
						$current,
						"endname",
						lv_endname_15_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCProcedure
entryRuleCProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCProcedureRule()); }
	iv_ruleCProcedure=ruleCProcedure
	{ $current=$iv_ruleCProcedure.current; }
	EOF;

// Rule CProcedure
ruleCProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCProcedureAccess().getCProcedureAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCProcedureAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCProcedureRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getCProcedureAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCProcedureAccess().getParametersCParameterParserRuleCall_2_1_0());
					}
					lv_parameters_3_0=ruleCParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCProcedureRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"ac.soton.xtext.Xc.CParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getCProcedureAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCProcedureAccess().getParametersCParameterParserRuleCall_2_2_1_0());
						}
						lv_parameters_5_0=ruleCParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCProcedureRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"ac.soton.xtext.Xc.CParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getCProcedureAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getCProcedureAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCProcedureAccess().getPreconditionsCPreConditionParserRuleCall_4_0());
				}
				lv_preconditions_8_0=ruleCPreCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCProcedureRule());
					}
					add(
						$current,
						"preconditions",
						lv_preconditions_8_0,
						"ac.soton.xtext.Xc.CPreCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCProcedureAccess().getLocalVariablesCVariableParserRuleCall_5_0_0());
					}
					lv_localVariables_9_0=ruleCVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCProcedureRule());
						}
						add(
							$current,
							"localVariables",
							lv_localVariables_9_0,
							"ac.soton.xtext.Xc.CVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getCProcedureAccess().getBodyCExpressionParserRuleCall_5_1_0());
					}
					lv_body_10_0=ruleCExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCProcedureRule());
						}
						add(
							$current,
							"body",
							lv_body_10_0,
							"ac.soton.xtext.Xc.CExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getCProcedureAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCPreCondition
entryRuleCPreCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCPreConditionRule()); }
	iv_ruleCPreCondition=ruleCPreCondition
	{ $current=$iv_ruleCPreCondition.current; }
	EOF;

// Rule CPreCondition
ruleCPreCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getCPreConditionAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCPreConditionAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getCPreConditionAccess().getPredicateParserRuleCall_2());
		}
		rulePredicate
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCPreConditionAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getCPreConditionAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCPreConditionAccess().getExpressionCExpressionHelperParserRuleCall_5_0());
				}
				lv_expression_5_0=ruleCExpressionHelper
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCPreConditionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_5_0,
						"ac.soton.xtext.Xc.CExpressionHelper");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getCPreConditionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCParameter
entryRuleCParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCParameterRule()); }
	iv_ruleCParameter=ruleCParameter
	{ $current=$iv_ruleCParameter.current; }
	EOF;

// Rule CParameter
ruleCParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCParameterAccess().getCParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCParameterAccess().getTypeEStringParserRuleCall_1_0());
				}
				lv_type_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCParameterAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCParameterRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCVariable
entryRuleCVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCVariableRule()); }
	iv_ruleCVariable=ruleCVariable
	{ $current=$iv_ruleCVariable.current; }
	EOF;

// Rule CVariable
ruleCVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCVariableAccess().getCVariable_ImplParserRuleCall_0());
		}
		this_CVariable_Impl_0=ruleCVariable_Impl
		{
			$current = $this_CVariable_Impl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCVariableAccess().getCArrayVariableParserRuleCall_1());
		}
		this_CArrayVariable_1=ruleCArrayVariable
		{
			$current = $this_CArrayVariable_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCVariable_Impl
entryRuleCVariable_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCVariable_ImplRule()); }
	iv_ruleCVariable_Impl=ruleCVariable_Impl
	{ $current=$iv_ruleCVariable_Impl.current; }
	EOF;

// Rule CVariable_Impl
ruleCVariable_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCVariable_ImplAccess().getCVariableAction_0(),
					$current);
			}
		)
		(
			(
				lv_isConstant_1_0='const'
				{
					newLeafNode(lv_isConstant_1_0, grammarAccess.getCVariable_ImplAccess().getIsConstantConstKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCVariable_ImplRule());
					}
					setWithLastConsumed($current, "isConstant", lv_isConstant_1_0 != null, "const");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCVariable_ImplAccess().getTypeEStringParserRuleCall_2_0());
				}
				lv_type_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCVariable_ImplRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCVariable_ImplAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCVariable_ImplRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getCVariable_ImplAccess().getEqualsSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCVariable_ImplAccess().getValueEStringParserRuleCall_4_1_0());
					}
					lv_value_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCVariable_ImplRule());
						}
						set(
							$current,
							"value",
							lv_value_5_0,
							"ac.soton.xtext.Xc.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCArrayVariable
entryRuleCArrayVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCArrayVariableRule()); }
	iv_ruleCArrayVariable=ruleCArrayVariable
	{ $current=$iv_ruleCArrayVariable.current; }
	EOF;

// Rule CArrayVariable
ruleCArrayVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCArrayVariableAccess().getCArrayVariableAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCArrayVariableAccess().getTypeEStringParserRuleCall_0_1_0());
					}
					lv_type_1_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCArrayVariableRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"ac.soton.xtext.Xc.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='*'
			{
				newLeafNode(otherlv_2, grammarAccess.getCArrayVariableAccess().getAsteriskKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCArrayVariableAccess().getNameEStringParserRuleCall_0_3_0());
					}
					lv_name_3_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCArrayVariableRule());
						}
						set(
							$current,
							"name",
							lv_name_3_0,
							"ac.soton.xtext.Xc.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCArrayVariableAccess().getTypeEStringParserRuleCall_1_0_0());
					}
					lv_type_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCArrayVariableRule());
						}
						set(
							$current,
							"type",
							lv_type_4_0,
							"ac.soton.xtext.Xc.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getCArrayVariableAccess().getNameEStringParserRuleCall_1_1_0());
					}
					lv_name_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCArrayVariableRule());
						}
						set(
							$current,
							"name",
							lv_name_5_0,
							"ac.soton.xtext.Xc.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='['
			{
				newLeafNode(otherlv_6, grammarAccess.getCArrayVariableAccess().getLeftSquareBracketKeyword_1_2());
			}
			{
				newCompositeNode(grammarAccess.getCArrayVariableAccess().getEIntParserRuleCall_1_3());
			}
			ruleEInt
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getCArrayVariableAccess().getRightSquareBracketKeyword_1_4());
			}
			otherlv_9='='
			{
				newLeafNode(otherlv_9, grammarAccess.getCArrayVariableAccess().getEqualsSignKeyword_1_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCArrayVariableAccess().getValueEStringParserRuleCall_1_6_0());
					}
					lv_value_10_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCArrayVariableRule());
						}
						set(
							$current,
							"value",
							lv_value_10_0,
							"ac.soton.xtext.Xc.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCArrayVariableAccess().getTypeEStringParserRuleCall_2_0_0());
					}
					lv_type_11_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCArrayVariableRule());
						}
						set(
							$current,
							"type",
							lv_type_11_0,
							"ac.soton.xtext.Xc.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12='*'
			{
				newLeafNode(otherlv_12, grammarAccess.getCArrayVariableAccess().getAsteriskKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCArrayVariableAccess().getNameEStringParserRuleCall_2_2_0());
					}
					lv_name_13_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCArrayVariableRule());
						}
						set(
							$current,
							"name",
							lv_name_13_0,
							"ac.soton.xtext.Xc.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14='='
			{
				newLeafNode(otherlv_14, grammarAccess.getCArrayVariableAccess().getEqualsSignKeyword_2_3());
			}
			otherlv_15='malloc'
			{
				newLeafNode(otherlv_15, grammarAccess.getCArrayVariableAccess().getMallocKeyword_2_4());
			}
			otherlv_16='('
			{
				newLeafNode(otherlv_16, grammarAccess.getCArrayVariableAccess().getLeftParenthesisKeyword_2_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCArrayVariableAccess().getSizeEIntParserRuleCall_2_6_0());
					}
					lv_size_17_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCArrayVariableRule());
						}
						set(
							$current,
							"size",
							lv_size_17_0,
							"ac.soton.xtext.Xc.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_18=')'
			{
				newLeafNode(otherlv_18, grammarAccess.getCArrayVariableAccess().getRightParenthesisKeyword_2_7());
			}
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCArrayVariableAccess().getTypeEStringParserRuleCall_3_0_0());
					}
					lv_type_19_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCArrayVariableRule());
						}
						set(
							$current,
							"type",
							lv_type_19_0,
							"ac.soton.xtext.Xc.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_20='*'
			{
				newLeafNode(otherlv_20, grammarAccess.getCArrayVariableAccess().getAsteriskKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCArrayVariableAccess().getNameEStringParserRuleCall_3_2_0());
					}
					lv_name_21_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCArrayVariableRule());
						}
						set(
							$current,
							"name",
							lv_name_21_0,
							"ac.soton.xtext.Xc.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_22='='
			{
				newLeafNode(otherlv_22, grammarAccess.getCArrayVariableAccess().getEqualsSignKeyword_3_3());
			}
			otherlv_23='calloc'
			{
				newLeafNode(otherlv_23, grammarAccess.getCArrayVariableAccess().getCallocKeyword_3_4());
			}
			otherlv_24='('
			{
				newLeafNode(otherlv_24, grammarAccess.getCArrayVariableAccess().getLeftParenthesisKeyword_3_5());
			}
			{
				newCompositeNode(grammarAccess.getCArrayVariableAccess().getMathematicalFormulaParserRuleCall_3_6());
			}
			ruleMathematicalFormula
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_26=','
			{
				newLeafNode(otherlv_26, grammarAccess.getCArrayVariableAccess().getCommaKeyword_3_7());
			}
			{
				newCompositeNode(grammarAccess.getCArrayVariableAccess().getMathematicalFormulaParserRuleCall_3_8());
			}
			ruleMathematicalFormula
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_28=')'
			{
				newLeafNode(otherlv_28, grammarAccess.getCArrayVariableAccess().getRightParenthesisKeyword_3_9());
			}
		)
	)
;

// Entry rule entryRuleCExpression
entryRuleCExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCExpressionRule()); }
	iv_ruleCExpression=ruleCExpression
	{ $current=$iv_ruleCExpression.current; }
	EOF;

// Rule CExpression
ruleCExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCExpressionAccess().getExpressionCExpressionHelperParserRuleCall_0_0());
				}
				lv_expression_0_0=ruleCExpressionHelper
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_0_0,
						"ac.soton.xtext.Xc.CExpressionHelper");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCExpressionAccess().getExpressionForLoopParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleForLoop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"ac.soton.xtext.Xc.ForLoop");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCExpressionHelper
entryRuleCExpressionHelper returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCExpressionHelperRule()); }
	iv_ruleCExpressionHelper=ruleCExpressionHelper
	{ $current=$iv_ruleCExpressionHelper.current.getText(); }
	EOF;

// Rule CExpressionHelper
ruleCExpressionHelper returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCExpressionHelperAccess().getPreConditionParserRuleCall_0());
		}
		this_PreCondition_0=rulePreCondition
		{
			$current.merge(this_PreCondition_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCExpressionHelperAccess().getMathematicalFormulaParserRuleCall_1());
		}
		this_MathematicalFormula_1=ruleMathematicalFormula
		{
			$current.merge(this_MathematicalFormula_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCExpressionHelperAccess().getArrayLenParserRuleCall_2());
		}
		this_ArrayLen_2=ruleArrayLen
		{
			$current.merge(this_ArrayLen_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePreCondition
entryRulePreCondition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPreConditionRule()); }
	iv_rulePreCondition=rulePreCondition
	{ $current=$iv_rulePreCondition.current.getText(); }
	EOF;

// Rule PreCondition
rulePreCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='if'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPreConditionAccess().getIfKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPreConditionAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getPreConditionAccess().getPredicateParserRuleCall_2());
		}
		this_Predicate_2=rulePredicate
		{
			$current.merge(this_Predicate_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPreConditionAccess().getRightParenthesisKeyword_3());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPreConditionAccess().getLeftCurlyBracketKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getPreConditionAccess().getCExpressionHelperParserRuleCall_5());
		}
		this_CExpressionHelper_5=ruleCExpressionHelper
		{
			$current.merge(this_CExpressionHelper_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPreConditionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleForLoop
entryRuleForLoop returns [String current=null]:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	iv_ruleForLoop=ruleForLoop
	{ $current=$iv_ruleForLoop.current.getText(); }
	EOF;

// Rule ForLoop
ruleForLoop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='for'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForLoopAccess().getForKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getForLoopAccess().getEStringParserRuleCall_2());
		}
		this_EString_2=ruleEString
		{
			$current.merge(this_EString_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForLoopAccess().getSemicolonKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getForLoopAccess().getFormulaParserRuleCall_4());
		}
		this_Formula_4=ruleFormula
		{
			$current.merge(this_Formula_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForLoopAccess().getSemicolonKeyword_5());
		}
		{
			newCompositeNode(grammarAccess.getForLoopAccess().getMathematicalFormulaParserRuleCall_6());
		}
		this_MathematicalFormula_6=ruleMathematicalFormula
		{
			$current.merge(this_MathematicalFormula_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForLoopAccess().getRightParenthesisKeyword_7());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_8());
		}
		{
			newCompositeNode(grammarAccess.getForLoopAccess().getCExpressionHelperParserRuleCall_9());
		}
		this_CExpressionHelper_9=ruleCExpressionHelper
		{
			$current.merge(this_CExpressionHelper_9);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRuleArrayLen
entryRuleArrayLen returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArrayLenRule()); }
	iv_ruleArrayLen=ruleArrayLen
	{ $current=$iv_ruleArrayLen.current.getText(); }
	EOF;

// Rule ArrayLen
ruleArrayLen returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='sizeof'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayLenAccess().getSizeofKeyword_0());
		}
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayLenAccess().getAsteriskKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getArrayLenAccess().getEStringParserRuleCall_2());
		}
		this_EString_2=ruleEString
		{
			$current.merge(this_EString_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayLenAccess().getSolidusKeyword_3());
		}
		kw='sizeof'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayLenAccess().getSizeofKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getArrayLenAccess().getEStringParserRuleCall_5());
		}
		this_EString_5=ruleEString
		{
			$current.merge(this_EString_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayLenAccess().getLeftSquareBracketKeyword_6());
		}
		kw='0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayLenAccess().getDigitZeroKeyword_7());
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayLenAccess().getRightSquareBracketKeyword_8());
		}
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current.getText(); }
	EOF;

// Rule Predicate
rulePredicate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='test'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPredicateAccess().getTestKeyword());
	}
;

// Entry rule entryRuleFormula
entryRuleFormula returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	iv_ruleFormula=ruleFormula
	{ $current=$iv_ruleFormula.current.getText(); }
	EOF;

// Rule Formula
ruleFormula returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFormulaAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getFormulaAccess().getIDTerminalRuleCall_1());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFormulaAccess().getEqualsSignEqualsSignKeyword_2());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFormulaAccess().getLessThanSignKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFormulaAccess().getGreaterThanSignKeyword_4());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFormulaAccess().getGreaterThanSignEqualsSignKeyword_5());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFormulaAccess().getLessThanSignEqualsSignKeyword_6());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFormulaAccess().getExclamationMarkEqualsSignKeyword_7());
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFormulaAccess().getLeftParenthesisKeyword_8_0());
			}
			{
				newCompositeNode(grammarAccess.getFormulaAccess().getFormulaParserRuleCall_8_1());
			}
			this_Formula_9=ruleFormula
			{
				$current.merge(this_Formula_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFormulaAccess().getRightParenthesisKeyword_8_2());
			}
		)
	)+
;

// Entry rule entryRuleMathematicalFormula
entryRuleMathematicalFormula returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMathematicalFormulaRule()); }
	iv_ruleMathematicalFormula=ruleMathematicalFormula
	{ $current=$iv_ruleMathematicalFormula.current.getText(); }
	EOF;

// Rule MathematicalFormula
ruleMathematicalFormula returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='++'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathematicalFormulaAccess().getPlusSignPlusSignKeyword_0());
		}
		    |
		kw='--'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMathematicalFormulaAccess().getHyphenMinusHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleIntegerFormula
entryRuleIntegerFormula returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntegerFormulaRule()); }
	iv_ruleIntegerFormula=ruleIntegerFormula
	{ $current=$iv_ruleIntegerFormula.current.getText(); }
	EOF;

// Rule IntegerFormula
ruleIntegerFormula returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getIntegerFormulaAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getIntegerFormulaAccess().getIDTerminalRuleCall_1());
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIntegerFormulaAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getIntegerFormulaAccess().getIntegerFormulaParserRuleCall_2_1());
			}
			this_IntegerFormula_3=ruleIntegerFormula
			{
				$current.merge(this_IntegerFormula_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIntegerFormulaAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)+
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleCInt
entryRuleCInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCIntRule()); }
	iv_ruleCInt=ruleCInt
	{ $current=$iv_ruleCInt.current.getText(); }
	EOF;

// Rule CInt
ruleCInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getCIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleCBoolean
entryRuleCBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCBooleanRule()); }
	iv_ruleCBoolean=ruleCBoolean
	{ $current=$iv_ruleCBoolean.current.getText(); }
	EOF;

// Rule CBoolean
ruleCBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCBooleanAccess().getDigitOneKeyword_0());
		}
		    |
		kw='0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCBooleanAccess().getDigitZeroKeyword_1());
		}
	)
;

// Entry rule entryRuleCStruct
entryRuleCStruct returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCStructRule()); }
	iv_ruleCStruct=ruleCStruct
	{ $current=$iv_ruleCStruct.current; }
	EOF;

// Rule CStruct
ruleCStruct returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCStructAccess().getCStructAction_0(),
					$current);
			}
		)
		otherlv_1='typedef'
		{
			newLeafNode(otherlv_1, grammarAccess.getCStructAccess().getTypedefKeyword_1());
		}
		otherlv_2='struct'
		{
			newLeafNode(otherlv_2, grammarAccess.getCStructAccess().getStructKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCStructAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCStructRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getCStructAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCStructAccess().getFieldsCFieldParserRuleCall_5_0_0());
					}
					lv_fields_5_0=ruleCField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCStructRule());
						}
						add(
							$current,
							"fields",
							lv_fields_5_0,
							"ac.soton.xtext.Xc.CField");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getCStructAccess().getSemicolonKeyword_5_1());
			}
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getCStructAccess().getRightCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCStructAccess().getTypeEStringParserRuleCall_7_0());
				}
				lv_type_8_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCStructRule());
					}
					set(
						$current,
						"type",
						lv_type_8_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCField
entryRuleCField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCFieldRule()); }
	iv_ruleCField=ruleCField
	{ $current=$iv_ruleCField.current; }
	EOF;

// Rule CField
ruleCField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCFieldAccess().getCFieldAction_0(),
					$current);
			}
		)
		{
			newCompositeNode(grammarAccess.getCFieldAccess().getEStringParserRuleCall_1());
		}
		ruleEString
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCFieldAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCFieldRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCEnumeration
entryRuleCEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCEnumerationRule()); }
	iv_ruleCEnumeration=ruleCEnumeration
	{ $current=$iv_ruleCEnumeration.current; }
	EOF;

// Rule CEnumeration
ruleCEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCEnumerationAccess().getCEnumerationAction_0(),
					$current);
			}
		)
		otherlv_1='typedef'
		{
			newLeafNode(otherlv_1, grammarAccess.getCEnumerationAccess().getTypedefKeyword_1());
		}
		otherlv_2='enum'
		{
			newLeafNode(otherlv_2, grammarAccess.getCEnumerationAccess().getEnumKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCEnumerationAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCEnumerationRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getCEnumerationAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCEnumerationAccess().getEnumPropertiesCEnumPropertiesParserRuleCall_5_0_0());
					}
					lv_enumProperties_5_0=ruleCEnumProperties
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCEnumerationRule());
						}
						add(
							$current,
							"enumProperties",
							lv_enumProperties_5_0,
							"ac.soton.xtext.Xc.CEnumProperties");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getCEnumerationAccess().getCommaKeyword_5_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCEnumerationAccess().getEnumPropertiesCEnumPropertiesParserRuleCall_5_1_1_0());
						}
						lv_enumProperties_7_0=ruleCEnumProperties
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCEnumerationRule());
							}
							add(
								$current,
								"enumProperties",
								lv_enumProperties_7_0,
								"ac.soton.xtext.Xc.CEnumProperties");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getCEnumerationAccess().getRightCurlyBracketKeyword_6());
		}
		{
			newCompositeNode(grammarAccess.getCEnumerationAccess().getEStringParserRuleCall_7());
		}
		ruleEString
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCEnumProperties
entryRuleCEnumProperties returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCEnumPropertiesRule()); }
	iv_ruleCEnumProperties=ruleCEnumProperties
	{ $current=$iv_ruleCEnumProperties.current; }
	EOF;

// Rule CEnumProperties
ruleCEnumProperties returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCEnumPropertiesAccess().getCEnumPropertiesAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCEnumPropertiesAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCEnumPropertiesRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"ac.soton.xtext.Xc.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

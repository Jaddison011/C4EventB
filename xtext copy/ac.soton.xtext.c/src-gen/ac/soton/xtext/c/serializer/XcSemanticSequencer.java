/*
 * generated by Xtext 2.25.0
 */
package ac.soton.xtext.c.serializer;

import ac.soton.xtext.c.services.XcGrammarAccess;
import com.google.inject.Inject;
import ecore.CArray;
import ecore.CArrayElement;
import ecore.CArrayVariable;
import ecore.CDerivedType;
import ecore.CDiscreteType;
import ecore.CEnumProperties;
import ecore.CEnumeration;
import ecore.CExpression;
import ecore.CField;
import ecore.CFunction;
import ecore.CHeaderFile;
import ecore.CIncludeDirective;
import ecore.CParameter;
import ecore.CPointer;
import ecore.CPreCondition;
import ecore.CProcedure;
import ecore.CSourceFile;
import ecore.CStruct;
import ecore.CSubProgram;
import ecore.CTranslationUnit;
import ecore.CType;
import ecore.CVariable;
import ecore.EcorePackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class XcSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XcGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EcorePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EcorePackage.CARRAY:
				sequence_CArray_Impl(context, (CArray) semanticObject); 
				return; 
			case EcorePackage.CARRAY_ELEMENT:
				sequence_CArrayElement(context, (CArrayElement) semanticObject); 
				return; 
			case EcorePackage.CARRAY_VARIABLE:
				sequence_CArrayVariable(context, (CArrayVariable) semanticObject); 
				return; 
			case EcorePackage.CDERIVED_TYPE:
				sequence_CDerivedType_Impl(context, (CDerivedType) semanticObject); 
				return; 
			case EcorePackage.CDISCRETE_TYPE:
				sequence_CDiscreteType_Impl(context, (CDiscreteType) semanticObject); 
				return; 
			case EcorePackage.CENUM_PROPERTIES:
				sequence_CEnumProperties(context, (CEnumProperties) semanticObject); 
				return; 
			case EcorePackage.CENUMERATION:
				sequence_CEnumeration(context, (CEnumeration) semanticObject); 
				return; 
			case EcorePackage.CEXPRESSION:
				sequence_CExpression_Impl(context, (CExpression) semanticObject); 
				return; 
			case EcorePackage.CFIELD:
				sequence_CField(context, (CField) semanticObject); 
				return; 
			case EcorePackage.CFUNCTION:
				sequence_CFunction(context, (CFunction) semanticObject); 
				return; 
			case EcorePackage.CHEADER_FILE:
				sequence_CHeaderFile(context, (CHeaderFile) semanticObject); 
				return; 
			case EcorePackage.CINCLUDE_DIRECTIVE:
				sequence_CIncludeDirective(context, (CIncludeDirective) semanticObject); 
				return; 
			case EcorePackage.CPARAMETER:
				sequence_CParameter(context, (CParameter) semanticObject); 
				return; 
			case EcorePackage.CPOINTER:
				sequence_CPointer(context, (CPointer) semanticObject); 
				return; 
			case EcorePackage.CPRE_CONDITION:
				sequence_CPreCondition(context, (CPreCondition) semanticObject); 
				return; 
			case EcorePackage.CPROCEDURE:
				sequence_CProcedure(context, (CProcedure) semanticObject); 
				return; 
			case EcorePackage.CSOURCE_FILE:
				sequence_CSourceFile(context, (CSourceFile) semanticObject); 
				return; 
			case EcorePackage.CSTRUCT:
				sequence_CStruct(context, (CStruct) semanticObject); 
				return; 
			case EcorePackage.CSUB_PROGRAM:
				sequence_CSubProgram_Impl(context, (CSubProgram) semanticObject); 
				return; 
			case EcorePackage.CTRANSLATION_UNIT:
				sequence_CTranslationUnit(context, (CTranslationUnit) semanticObject); 
				return; 
			case EcorePackage.CTYPE:
				sequence_CType_Impl(context, (CType) semanticObject); 
				return; 
			case EcorePackage.CVARIABLE:
				sequence_CVariable_Impl(context, (CVariable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CArrayElement returns CArrayElement
	 *
	 * Constraint:
	 *     (name=EString endname=EString? index=EInt? value=EString?)
	 */
	protected void sequence_CArrayElement(ISerializationContext context, CArrayElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CVariable returns CArrayVariable
	 *     CType returns CArrayVariable
	 *     CArrayVariable returns CArrayVariable
	 *
	 * Constraint:
	 *     (
	 *         isConstant?='isConstant'? 
	 *         name=EString 
	 *         endname=EString? 
	 *         value=EString? 
	 *         type=EString? 
	 *         elementType=EString? 
	 *         size=EInt? 
	 *         superType=[CType|EString]? 
	 *         (arrayElements+=CArrayElement arrayElements+=CArrayElement*)?
	 *     )
	 */
	protected void sequence_CArrayVariable(ISerializationContext context, CArrayVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CType returns CArray
	 *     CArray_Impl returns CArray
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         endname=EString? 
	 *         elementType=EString? 
	 *         size=EInt? 
	 *         superType=[CType|EString]? 
	 *         (arrayElements+=CArrayElement arrayElements+=CArrayElement*)?
	 *     )
	 */
	protected void sequence_CArray_Impl(ISerializationContext context, CArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CType returns CDerivedType
	 *     CDerivedType_Impl returns CDerivedType
	 *
	 * Constraint:
	 *     (name=EString endname=EString? superType=[CType|EString]?)
	 */
	protected void sequence_CDerivedType_Impl(ISerializationContext context, CDerivedType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CType returns CDiscreteType
	 *     CDiscreteType_Impl returns CDiscreteType
	 *
	 * Constraint:
	 *     (name=EString endname=EString?)
	 */
	protected void sequence_CDiscreteType_Impl(ISerializationContext context, CDiscreteType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CEnumProperties returns CEnumProperties
	 *
	 * Constraint:
	 *     (name=EString endname=EString? integralConstant=EInt?)
	 */
	protected void sequence_CEnumProperties(ISerializationContext context, CEnumProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CType returns CEnumeration
	 *     CEnumeration returns CEnumeration
	 *
	 * Constraint:
	 *     (name=EString endname=EString? (enumProperties+=CEnumProperties enumProperties+=CEnumProperties*)?)
	 */
	protected void sequence_CEnumeration(ISerializationContext context, CEnumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CExpression returns CExpression
	 *     CExpression_Impl returns CExpression
	 *
	 * Constraint:
	 *     expression=EString?
	 */
	protected void sequence_CExpression_Impl(ISerializationContext context, CExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CType returns CField
	 *     CField returns CField
	 *
	 * Constraint:
	 *     (name=EString endname=EString?)
	 */
	protected void sequence_CField(ISerializationContext context, CField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSubProgram returns CFunction
	 *     CFunction returns CFunction
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         endname=EString? 
	 *         returnType=EString? 
	 *         (parameters+=CParameter parameters+=CParameter*)? 
	 *         (localVariables+=CVariable localVariables+=CVariable*)? 
	 *         (body+=CExpression body+=CExpression*)? 
	 *         (preconditions+=CPreCondition preconditions+=CPreCondition*)?
	 *     )
	 */
	protected void sequence_CFunction(ISerializationContext context, CFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CHeaderFile returns CHeaderFile
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         endname=EString? 
	 *         (subPrograms+=CSubProgram subPrograms+=CSubProgram*)? 
	 *         (globalVariables+=CVariable globalVariables+=CVariable*)? 
	 *         (types+=CType types+=CType*)?
	 *     )
	 */
	protected void sequence_CHeaderFile(ISerializationContext context, CHeaderFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CIncludeDirective returns CIncludeDirective
	 *
	 * Constraint:
	 *     (name=EString endname=EString? header=EString?)
	 */
	protected void sequence_CIncludeDirective(ISerializationContext context, CIncludeDirective semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CParameter returns CParameter
	 *
	 * Constraint:
	 *     (name=EString endname=EString? type=EString?)
	 */
	protected void sequence_CParameter(ISerializationContext context, CParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CType returns CPointer
	 *     CPointer returns CPointer
	 *
	 * Constraint:
	 *     (name=EString endname=EString? superType=[CType|EString]?)
	 */
	protected void sequence_CPointer(ISerializationContext context, CPointer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CExpression returns CPreCondition
	 *     CPreCondition returns CPreCondition
	 *
	 * Constraint:
	 *     (expression=EString? predicate=EString?)
	 */
	protected void sequence_CPreCondition(ISerializationContext context, CPreCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSubProgram returns CProcedure
	 *     CProcedure returns CProcedure
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         endname=EString? 
	 *         (parameters+=CParameter parameters+=CParameter*)? 
	 *         (localVariables+=CVariable localVariables+=CVariable*)? 
	 *         (body+=CExpression body+=CExpression*)? 
	 *         (preconditions+=CPreCondition preconditions+=CPreCondition*)?
	 *     )
	 */
	protected void sequence_CProcedure(ISerializationContext context, CProcedure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSourceFile returns CSourceFile
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         endname=EString? 
	 *         (subPrograms+=CSubProgram subPrograms+=CSubProgram*)? 
	 *         (globalVariables+=CVariable globalVariables+=CVariable*)? 
	 *         (types+=CType types+=CType*)? 
	 *         (includeDirectives+=CIncludeDirective includeDirectives+=CIncludeDirective*)?
	 *     )
	 */
	protected void sequence_CSourceFile(ISerializationContext context, CSourceFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CType returns CStruct
	 *     CStruct returns CStruct
	 *
	 * Constraint:
	 *     (name=EString endname=EString? type=EString? superType=[CType|EString]? (fields+=CField fields+=CField*)?)
	 */
	protected void sequence_CStruct(ISerializationContext context, CStruct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CSubProgram returns CSubProgram
	 *     CSubProgram_Impl returns CSubProgram
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         endname=EString? 
	 *         (parameters+=CParameter parameters+=CParameter*)? 
	 *         (localVariables+=CVariable localVariables+=CVariable*)? 
	 *         (body+=CExpression body+=CExpression*)? 
	 *         (preconditions+=CPreCondition preconditions+=CPreCondition*)?
	 *     )
	 */
	protected void sequence_CSubProgram_Impl(ISerializationContext context, CSubProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CTranslationUnit returns CTranslationUnit
	 *
	 * Constraint:
	 *     (name=EString endname=EString? (sourceFiles+=CSourceFile sourceFiles+=CSourceFile*)? (headerFiles+=CHeaderFile headerFiles+=CHeaderFile*)?)
	 */
	protected void sequence_CTranslationUnit(ISerializationContext context, CTranslationUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CType returns CType
	 *     CType_Impl returns CType
	 *
	 * Constraint:
	 *     (name=EString endname=EString?)
	 */
	protected void sequence_CType_Impl(ISerializationContext context, CType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CVariable returns CVariable
	 *     CVariable_Impl returns CVariable
	 *
	 * Constraint:
	 *     (isConstant?='isConstant'? name=EString endname=EString? value=EString? type=EString?)
	 */
	protected void sequence_CVariable_Impl(ISerializationContext context, CVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
